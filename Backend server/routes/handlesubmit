import React, { useState, useEffect } from 'react';

const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault(); // Prevent the default form submission behavior

    const formData = new FormData(event.currentTarget);

    // Extract and parse form field values
    const order = {
        maker: formData.get('maker') as string,
        taker: formData.get('taker') as string,
        amount: parseFloat(formData.get('amount') as string),
        price: parseFloat(formData.get('price') as string),
        nonce: parseInt(formData.get('nonce') as string, 10),
        expiry: parseInt(formData.get('expiry') as string, 10),
    };

    const response = await fetch('/api/orders', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(order),
    });

    if (!response.ok) {
        const errorResponse = await response.json();
        throw new Error(`HTTP error! Status: ${response.status}, Message: ${errorResponse.message || 'Unknown error'}`);
    }

    return await response.json();
};

const FormComponent = () => {
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [submissionStatus, setSubmissionStatus] = useState<string | null>(null);
    const [submissionError, setSubmissionError] = useState<string | null>(null);

    const onSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
        setIsSubmitting(true); // Set isSubmitting to true before submission
        setSubmissionStatus(null); // Clear any previous status
        setSubmissionError(null); // Clear any previous error
        try {
            await handleSubmit(event); // Call the async submit function
            setSubmissionStatus("success"); // Set status to success on successful submission
        } catch (error: any) {
            console.error(`❌ Submission failed: ${error.message}`);
            setSubmissionError(error.message); // Set the error message
            setSubmissionStatus("error"); // Optionally set status to error
        } finally {
            setIsSubmitting(false); // Reset isSubmitting to false after submission
        }
    };

    // Automatically clear the success message after 5 seconds
    useEffect(() => {
        if (submissionStatus === "success") {
            const timer = setTimeout(() => {
                setSubmissionStatus(null); // Clear the success message
            }, 5000);

            return () => clearTimeout(timer); // Cleanup the timer on component unmount or re-render
        }
    }, [submissionStatus]);

    return (
        <div>
            <form onSubmit={onSubmit}>
                <input type="text" name="maker" placeholder="Maker" required />
                <input type="text" name="taker" placeholder="Taker" required />
                <input type="number" name="amount" placeholder="Amount" required />
                <input type="number" name="price" placeholder="Price" required />
                <input type="number" name="nonce" placeholder="Nonce" required />
                <input type="number" name="expiry" placeholder="Expiry" required />
                <button type="submit" disabled={isSubmitting}>
                    {isSubmitting ? "Submitting..." : "Submit"}
                </button>
            </form>
            {submissionStatus === "success" && (
                <p style={{ color: "green" }}>✅ Order submitted</p>
            )}
            {submissionError && (
                <p style={{ color: "red" }}>❌ {submissionError}</p>
            )}
        </div>
    );
};

export default FormComponent;