import React, { useState, useEffect } from 'react';
import './OrderForm.css'; // Import CSS file for styling

const OrderForm = () => {
    const [formData, setFormData] = useState({
        orderId: '',
        price: '',
        amount: '',
    });
    const [errors, setErrors] = useState({});
    const [isDarkMode, setIsDarkMode] = useState(() => {
        return localStorage.getItem('isDarkMode') === 'true';
    });
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [submissionStatus, setSubmissionStatus] = useState(null); // Success or error message

    useEffect(() => {
        const root = document.documentElement;
        if (isDarkMode) {
            root.classList.add('dark');
        } else {
            root.classList.remove('dark');
        }
        localStorage.setItem('isDarkMode', isDarkMode);
    }, [isDarkMode]);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData({ ...formData, [name]: value });
        setErrors({ ...errors, [name]: '' });
    };

    const validateFields = () => {
        const newErrors = {};
        if (!formData.orderId) newErrors.orderId = 'Order ID is required.';
        if (!formData.price) {
            newErrors.price = 'Price is required.';
        } else if (isNaN(formData.price) || parseFloat(formData.price) <= 0) {
            newErrors.price = 'Price must be a positive number.';
        }
        if (!formData.amount) {
            newErrors.amount = 'Amount is required.';
        } else if (isNaN(formData.amount) || parseFloat(formData.amount) <= 0) {
            newErrors.amount = 'Amount must be a positive number.';
        }
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!validateFields()) {
            setSubmissionStatus({ type: 'error', message: 'Please fix the errors in the form.' });
            return;
        }
        setIsSubmitting(true);
        setSubmissionStatus(null); // Clear previous messages
        try {
            // Simulate an async operation
            await new Promise((resolve) => setTimeout(resolve, 2000));
            setSubmissionStatus({ type: 'success', message: 'Form submitted successfully!' });
        } catch (error) {
            setSubmissionStatus({ type: 'error', message: 'Submission failed. Please try again.' });
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <div>
            <div className="dark-mode-toggle">
                <label>
                    <input
                        type="checkbox"
                        checked={isDarkMode}
                        onChange={() => setIsDarkMode(!isDarkMode)}
                        disabled={isSubmitting}
                    />
                    Dark Mode
                </label>
            </div>
            <form onSubmit={handleSubmit}>
                <div>
                    <label htmlFor="orderId">Order ID:</label>
                    <input
                        type="text"
                        id="orderId"
                        name="orderId"
                        value={formData.orderId}
                        onChange={handleInputChange}
                        className={errors.orderId ? 'input-error' : ''}
                        disabled={isSubmitting}
                    />
                    {errors.orderId && <p className="error-message">{errors.orderId}</p>}
                </div>
                <div>
                    <label htmlFor="price">Price:</label>
                    <input
                        type="text"
                        id="price"
                        name="price"
                        value={formData.price}
                        onChange={handleInputChange}
                        className={errors.price ? 'input-error' : ''}
                        disabled={isSubmitting}
                    />
                    {errors.price && <p className="error-message">{errors.price}</p>}
                </div>
                <div>
                    <label htmlFor="amount">Amount:</label>
                    <input
                        type="text"
                        id="amount"
                        name="amount"
                        value={formData.amount}
                        onChange={handleInputChange}
                        className={errors.amount ? 'input-error' : ''}
                        disabled={isSubmitting}
                    />
                    {errors.amount && <p className="error-message">{errors.amount}</p>}
                </div>
                <button type="submit" disabled={isSubmitting}>
                    {isSubmitting ? 'Submitting...' : 'Submit'}
                </button>
            </form>
            {submissionStatus && (
                <div
                    className={`submission-message ${
                        submissionStatus.type === 'success' ? 'success' : 'error'
                    }`}
                >
                    {submissionStatus.message}
                </div>
            )}
        </div>
    );
};

export default OrderForm;