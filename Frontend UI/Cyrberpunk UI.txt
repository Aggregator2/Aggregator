<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Cyberpunk DEX UI</title>
  <!-- Import futuristic and base fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&family=Roboto:wght@300;400&display=swap" rel="stylesheet">
  <style>
    /* Root theme colors and variables */
    :root {
      --accent: #00ffff;   /* neon cyan */
      --accent2: #ff00ff;  /* neon magenta */
    }

    /* Global reset/base */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    body {
      /* Dark futuristic background with neon glow hints */
      background: #0f0c29;
      background-image: 
        radial-gradient(at top left, rgba(255,0,255,0.15), transparent 50%),
        radial-gradient(at bottom right, rgba(0,255,255,0.15), transparent 50%),
        linear-gradient(135deg, #0f0c29, #302b63, #24243e);
      background-attachment: fixed, fixed, fixed;
      background-repeat: no-repeat;
      background-size: cover;
      color: #e0f7fa;
      font-family: 'Roboto', sans-serif;
      min-height: 100vh;
    }

    /* Header layout: title on left, wallet button on right */
    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 20px;
      header .title {
  display: flex;
  flex-direction: column;
}


    header h1 {
      font-family: 'Orbitron', sans-serif;
      font-size: 2rem;
      letter-spacing: 2px;
      color: #e0f7fa;
      text-shadow: 0 0 5px rgba(224,247,250,0.5);
      margin: 0;
    }
    header p {
      font-size: 1rem;
      color: #80deea;
      margin: 5px 0 0;
    }

    /* Main content containers (form and order book) styled as neon glass panels */
    .container {
      width: 90%;
      max-width: 600px;
      margin: 20px auto;
      padding: 20px;
      background: linear-gradient(135deg, rgba(255,255,255,0.05), rgba(255,255,255,0.02));
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(255,255,255,0.2);
      border-radius: 12px;
      /* Neon glow around container */
      box-shadow: 0 0 10px rgba(0,255,255,0.15), 0 0 30px rgba(255,0,255,0.1), inset 0 0 10px rgba(255,255,255,0.05);
      animation: fadeIn 1s ease-out forwards;
    }
    /* Section titles inside containers */
    .container h2 {
      font-family: 'Orbitron', sans-serif;
      font-size: 1.4rem;
      color: #ff33cc;
      text-shadow: 0 0 5px rgba(255, 51, 204, 0.7);
      margin-bottom: 15px;
    }

    /* Form elements styling */
    form#orderForm select {
  appearance: none;
  -webkit-appearance: none;
} /* <-- Add this closing brace */

    form#orderForm input,
    form#orderForm select {
      background: rgba(0,0,0,0.5);
      border: 1px solid rgba(255,255,255,0.3);
      border-radius: 8px;
      color: #e0f7fa;
      font-size: 1rem;
      padding: 10px;
      margin-bottom: 15px;
      width: 100%;
    }
    form#orderForm input::placeholder {
      color: #b0c5c8;
    }
    form#orderForm select {
      appearance: none;
      -webkit-appearance: none;
      /* (A custom dropdown arrow could be added here with background-image if desired) */
    }
    form#orderForm select option {
      background: #102027;
      color: #e0f7fa;
    }
    /* Button styling for primary actions (Connect Wallet & Submit Order) */
    #walletAddress,
    #submitOrder {
      background: rgba(255,255,255,0.1);
      border: 2px solid var(--accent);
      border-radius: 8px;
      color: var(--accent);
      font-family: 'Orbitron', sans-serif;
      font-size: 1rem;
      padding: 10px 20px;
      cursor: pointer;
      text-shadow: 0 0 5px var(--accent);
      transition: background 0.3s, color 0.3s, box-shadow 0.3s;
    }
    #walletAddress:hover,
    #submitOrder:hover {
      background: var(--accent);
      color: #003340;
      /* a slight dark text to contrast neon (using a very dark teal) */
      box-shadow: 0 0 15px var(--accent);
    }
    #walletAddress:focus,
    #submitOrder:focus {
      outline: none;
      box-shadow: 0 0 12px var(--accent);
    }
    #walletAddress:disabled,
    #submitOrder:disabled {
      cursor: not-allowed;
      opacity: 0.6;
      box-shadow: none;
      color: #e0f7fa;
      border-color: #e0f7fa;
      background: rgba(255,255,255,0.1);
      text-shadow: none;
    }

    /* Order Book controls (sort/filter) */
    .controls {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: 15px;
    }
    .controls select {
      flex: 1;
      min-width: 0;
      /* (inherits other select styles from form select) */
    }

    /* Orders list */
    #orderList {
      list-style: none;
      margin: 0;
      padding: 0;
    }
    #orderList li {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: rgba(255,255,255,0.08);
      border: 1px solid rgba(255,255,255,0.1);
      border-radius: 6px;
      padding: 8px 12px;
      margin-bottom: 8px;
      font-size: 0.9rem;
      color: #e0f7fa;
    }
    /* Cancel button for user's orders */
    .cancel-btn {
      background: none;
      border: 1px solid #ff3b3b;
      color: #ff3b3b;
      border-radius: 6px;
      padding: 4px 8px;
      font-size: 0.8rem;
      cursor: pointer;
      box-shadow: 0 0 5px rgba(255,59,59,0.6);
      transition: background 0.3s, color 0.3s;
    }
    .cancel-btn:hover {
      background: #ff3b3b;
      color: #000;
      box-shadow: 0 0 8px rgba(255,59,59,0.8);
    }
    .cancel-btn:focus {
      outline: none;
      box-shadow: 0 0 8px #ff3b3b;
    }

    /* Toast notification */
    #toast {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(0,0,0,0.7);
      color: #e0f7fa;
      border: 1px solid var(--accent);
      border-radius: 8px;
      padding: 10px 20px;
      font-size: 0.9rem;
      box-shadow: 0 0 10px var(--accent);
      opacity: 0;
      z-index: 1000;
    }
    @keyframes fadeInToast {
      from { opacity: 0; }
      to   { opacity: 1; }
    }
    @keyframes fadeOutToast {
      from { opacity: 1; }
      to   { opacity: 0; }
    }

    /* Wallet connect modal overlay */
    .modal {
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: rgba(0,0,0,0.5);
      backdrop-filter: blur(5px);
      -webkit-backdrop-filter: blur(5px);
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease;
      z-index: 999;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .modal.show {
      opacity: 1;
      pointer-events: auto;
    }
    .modal-content {
      background: rgba(255,255,255,0.1);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 1px solid rgba(255,255,255,0.3);
      border-radius: 10px;
      padding: 20px;
      max-width: 280px;
      text-align: center;
      color: #e0f7fa;
      position: relative;
      box-shadow: 0 0 15px rgba(0,255,255,0.2), 0 0 15px rgba(255,0,255,0.2);
    }
    .modal-content h3 {
      font-family: 'Orbitron', sans-serif;
      font-size: 1.1rem;
      margin-bottom: 10px;
    }
    .modal-content p {
      font-size: 0.9rem;
    }
    #closeModal {
      position: absolute;
      top: 8px; right: 10px;
      background: none;
      border: none;
      font-size: 1.3rem;
      color: #e0f7fa;
      cursor: pointer;
    }
    #closeModal:hover { color: #ffffff; }
    #closeModal:focus { outline: none; }

    /* Fade-in animation for any elements using it */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to   { opacity: 1; transform: translateY(0); }
    }
  </style>
</head>
<body>

  <header>
    <div class="title">
      <h1>Cyberpunk DEX UI</h1>
      <p>A decentralized exchange interface in a cyberpunk style.</p>
    </div>
    <button id="walletAddress" class="wallet" type="button">Connect Wallet</button>
  </header>

  <main>
    <div class="container" id="orderFormContainer">
      <h2>Create Order</h2>
      <form id="orderForm">
        <input type="text" id="sellToken" placeholder="Token to Sell (Address)" required>
        <input type="text" id="buyToken" placeholder="Token to Buy (Address)" required>
        <input type="number" step="any" id="sellAmount" placeholder="Sell Amount" required>
        <input type="number" step="any" id="buyAmount" placeholder="Buy Amount" required>
        <select id="side" required>
          <option value="buy">Buy Order</option>
          <option value="sell">Sell Order</option>
        </select>
        <button type="submit" id="submitOrder">Submit Order</button>
      </form>
    </div>

    <div class="container" id="orderBookContainer">
      <h2>Order Book</h2>
      <div class="controls">
        <select id="sort">
          <option value="newest">Newest</option>
          <option value="priceAsc">Price Asc</option>
          <option value="priceDesc">Price Desc</option>
        </select>
        <select id="filter">
          <option value="all">All</option>
          <option value="buy">Buys</option>
          <option value="sell">Sells</option>
        </select>
      </div>
      <ul id="orderList"></ul>
    </div>
  </main>

  <!-- Toast notification container -->
  <div id="toast"></div>

  <!-- Wallet Connect Modal -->
  <div id="walletModal" class="modal">
    <div class="modal-content">
      <h3>Connect Wallet</h3>
      <p>Please approve the connection in your wallet (e.g. MetaMask)...</p>
      <button id="closeModal" title="Cancel">&times;</button>
    </div>
  </div>

  <!-- Ethers.js library -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/ethers/5.7.2/ethers.min.js" integrity="sha384-pJJuhYFFWMjzOv8WPkGrO4cS6lV7df9pBN7reYkOJ4DN+XAUzD2DfZnrvLh96l4i" crossorigin="anonymous"></script>
  <script>
    const backendUrl = 'http://localhost:3000';
    let userAddress = '';

    // Show toast message with optional type ("info" or "error")
    function showToast(msg, type = "info") {
      const toast = document.getElementById('toast');
      toast.innerText = msg;
      // Adjust toast styling based on message type
      if (type === 'error') {
        toast.style.borderColor = '#ff3388';
        toast.style.boxShadow = '0 0 10px #ff3388';
      } else {
        toast.style.borderColor = '#00ffff';
        toast.style.boxShadow = '0 0 10px #00ffff';
      }
      // Trigger fade in/out animation
      toast.style.animation = 'fadeInToast 0.5s, fadeOutToast 0.5s 2.5s';
    }

    // Connect to user's Ethereum wallet (e.g., MetaMask)
    async function connectWallet() {
      const modal = document.getElementById('walletModal');
      try {
        modal.classList.add('show');  // show connecting overlay
        await window.ethereum.request({ method: 'eth_requestAccounts' });
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        const signer = provider.getSigner();
        userAddress = await signer.getAddress();
        // Update UI to show connected wallet
        const walletBtn = document.getElementById('walletAddress');
        walletBtn.innerText = userAddress.slice(0, 6) + '...' + userAddress.slice(-4);
        walletBtn.classList.add('connected');
        walletBtn.disabled = true;
        showToast('Wallet connected');
      } catch (err) {
        console.error('Wallet connect error:', err);
        showToast('Wallet connection failed', 'error');
      } finally {
        // Hide the modal overlay regardless of outcome
        modal.classList.remove('show');
      }
    }

    // Fetch and display the order book
    async function refreshOrders() {
      try {
        const sort = document.getElementById('sort').value;
        const filter = document.getElementById('filter').value;
        const res = await fetch(`${backendUrl}/orders?sort=${sort}&filter=${filter}`);
        const data = await res.json();
        const list = document.getElementById('orderList');
        list.innerHTML = '';
        data.forEach(order => {
          const item = document.createElement('li');
          // Use a colored dot indicator for buy/sell
          const bullet = order.side.toLowerCase() === 'buy' ? '🟢' : '🔴';
          item.textContent = `${bullet} #${order.id} ${order.side.toUpperCase()} ` +
                              `${order.sellAmount} ${order.sellToken} for ${order.buyAmount} ${order.buyToken} ` +
                              `(${order.duration}s left)`;
          // If the order belongs to the connected user, add a cancel button
          if (userAddress && order.user?.toLowerCase() === userAddress.toLowerCase()) {
            const cancelBtn = document.createElement('button');
            cancelBtn.textContent = 'Cancel';
            cancelBtn.className = 'cancel-btn';
            cancelBtn.addEventListener('click', async () => {
              try {
                await fetch(`${backendUrl}/orders/${order.id}`, { method: 'DELETE' });
                showToast('Order cancelled');
              } catch (err) {
                console.error('Cancel error:', err);
                showToast('Failed to cancel order', 'error');
              } finally {
                refreshOrders();
              }
            });
            item.appendChild(cancelBtn);
          }
          list.appendChild(item);
        });
      } catch (err) {
        console.error('Error fetching orders:', err);
        showToast('Error loading orders', 'error');
      }
    }

    // Set up event listeners once DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
      // Initial fetch of orders and periodic refresh
      refreshOrders();
      setInterval(refreshOrders, 5000);

      // Wallet connect button click
      document.getElementById('walletAddress').addEventListener('click', async () => {
        if (!userAddress) {
          await connectWallet();
        }
        // (If already connected, we do nothing or could implement address copy on click)
      });

      // Close modal if X button is clicked
      document.getElementById('closeModal').addEventListener('click', () => {
        document.getElementById('walletModal').classList.remove('show');
      });

      // Order form submission
      const orderForm = document.getElementById('orderForm');
      orderForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const submitBtn = document.getElementById('submitOrder');
        // Prevent double-click and show submitting state
        submitBtn.disabled = true;
        submitBtn.innerText = 'Submitting...';
        // Ensure wallet is connected before submitting
        if (!userAddress) {
          await connectWallet();
          if (!userAddress) {
            // Connection failed or cancelled
            submitBtn.disabled = false;
            submitBtn.innerText = 'Submit Order';
            return;
          }
        }
        try {
          // Gather form data
          const sellToken = document.getElementById('sellToken').value;
          const buyToken = document.getElementById('buyToken').value;
          const sellAmount = document.getElementById('sellAmount').value;
          const buyAmount = document.getElementById('buyAmount').value;
          const side = document.getElementById('side').value;
          // Create order object (could include signature if required by backend)
          const order = { sellToken, buyToken, sellAmount, buyAmount, side };
          const res = await fetch(`${backendUrl}/orders`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(order)
          });
          const data = await res.json();
          if (!res.ok) {
            // Show error returned by backend (if any)
            const errorMsg = data.error ? data.error : JSON.stringify(data);
            showToast(`Error: ${errorMsg}`, 'error');
          } else {
            showToast('Order submitted');
            orderForm.reset();  // clear form for next order
            refreshOrders();    // refresh order book to include the new order
          }
        } catch (err) {
          console.error('Order submission failed:', err);
          showToast('Error submitting order', 'error');
        } finally {
          // Re-enable submit button
          submitBtn.disabled = false;
          submitBtn.innerText = 'Submit Order';
        }
      });
    });
  </script>
</body>
</html>
